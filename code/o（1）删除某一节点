public class Test13{
    public static class ListNode{
        int value;
        ListNode next;
    }
    public static ListNode deleteNode(ListNode head,ListNode tobeDeleted){
 
        // 如果输入参数有空值就返回表头结点
        if (head == null || tobeDeleted == null) {
            return head;
        }
 
        // 如果删除的是头结点，直接返回头结点的下一个结点
        if (head == tobeDeleted) {
            return head.next;
        }
        //以下情况，至少有2个节点
        //删除的是最后一个点
        if (tobeDeleted.next == null){
            ListNode tmp = head;
            while(tmp.next != tobeDeleted){//tmp的下一个节点只要不是待删除的，都往下遍历
                tmp = tmp.next;
            }
            tmp.next = null;//找到了next为待删除的点，则将next赋值为0，即删除
 
        }else {//如果删除的是中间节点
            tobeDeleted.value = tobeDeleted.next.value;
            tobeDeleted.next = tobeDeleted.next.next;
        }
        return head;//返回删除后的头结点
    }
 
    /*
    输出链表的元素
    @Param head 链表的头结点
     */
    public static void printList(ListNode head){
        while(head!=null){
            System.out.println(head.value + "->");
            head = head.next;
        }
        System.out.println("null");
    }
 
    public static void main(String[] args) {
        ListNode head  = new ListNode();
        head.value = 1;
 
        head.next  = new ListNode();
        head.next.value = 2;
 
        head.next.next  = new ListNode();
        head.next.next.value = 3;
 
        head.next.next.next = new ListNode();
        head.next.next.next.value = 4;
 
        ListNode middle = head.next.next.next.next = new ListNode();
//或者这一步也行        head.next.next.next.next.value = 5;
        middle.value =5;
        head.next.next.next.next.next = new ListNode();
        head.next.next.next.next.next.value = 6;
 
        head.next.next.next.next.next.next = new ListNode();
        head.next.next.next.next.next.next.value = 7;
 
        head.next.next.next.next.next.next.next = new ListNode();
        head.next.next.next.next.next.next.next.value = 8;
 
        ListNode last = head.next.next.next.next.next.next.next.next = new ListNode();
        head.next.next.next.next.next.next.next.next.value = 9;
 
//        head = deleteNode(head,null);
//        printList(head);
        head = deleteNode(head,middle);
        printList(head);
 
    }
 
}
